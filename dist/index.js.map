{"version":3,"sources":["reg.ts","fun.ts","index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"../src","sourcesContent":["// 身份证\nexport const IDCard = new RegExp('^[1-9]\\\\d{5}(18|19|20)\\\\d{2}((0[1-9])|(1[0-2]))(([0-2][1-9])|10|20|30|31)\\\\d{3}[0-9Xx]$');\n// 手机号码\nexport const Phone = new RegExp('^1\\\\d{10}$');\n// 邮箱\nexport const Email = new RegExp('^([A-Za-z0-9_\\\\-\\.\\u4e00-\\u9fa5])+\\@([A-Za-z0-9_\\\\-\\.])+\\\\.([A-Za-z]{2,8})$');\n// 汉字\nexport const Chinese = new RegExp('^[\\u4e00-\\u9fa5]+$');\n// IP\nexport const IP = new RegExp('((?:(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d)\\\\.){3}(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d))');\n\ninterface CreatePasswordRegProps {\n  useENLetter?: boolean, // 是否必须包含英文字母\n  useCapitalLetters?: boolean, // 是否必须包含大写英文字母\n  useNumber?: boolean, // 是否必须包含字母\n  useSpecialCharacters?: boolean, // 是否必须包含特殊字符\n  specialCharacters?: string, // 特殊字符内容\n  minLength?: number, // 最小长度\n  maxLength?: number, // 最大长度\n}\n\nconst defaultCreatePasswordRegProps = {\n  useENLetter: true,\n  useCapitalLetters: false,\n  useNumber: true,\n  useSpecialCharacters: false,\n  specialCharacters: \"#?!.,@$%^&*-\",\n  minLength: 6,\n  maxLength: 18,\n};\n\n/**\n * 生校验正则表达式\n * @param props\n */\nexport function createPasswordReg(props: CreatePasswordRegProps = defaultCreatePasswordRegProps) {\n  const newProps = Object.assign(defaultCreatePasswordRegProps, props);\n  const canUseLetter = `[a-zA-Z\\\\d${newProps.specialCharacters}]`;\n  const mustUseENLetter = `(?=.*?[A-Za-z])`;\n  const mustUseCapitalLetters = `(?=.*?[A-Z])`;\n  const mustUseNumber = `(?=.*?[0-9])`;\n  const mustUseSpecialCharacters = `(?=.*?[${newProps.specialCharacters}])`;\n  let str = \"\";\n  if (newProps.useENLetter) {\n    str = `${str}${mustUseENLetter}`;\n  }\n  if (newProps.useCapitalLetters) {\n    str = `${str}${mustUseCapitalLetters}`;\n  }\n  if (newProps.useNumber) {\n    str = `${str}${mustUseNumber}`;\n  }\n  if (newProps.useSpecialCharacters) {\n    str = `${str}${mustUseSpecialCharacters}`;\n  }\n  return new RegExp(`^${str}${canUseLetter}{${newProps.minLength},${newProps.maxLength}}$`);\n}\n\nexport default {\n  IDCard,\n  Phone,\n  Email,\n  Chinese,\n  IP,\n  createPasswordReg,\n};\n","/**\n * 隐藏身份证号码\n * @param IDCard\n * @param start 开始隐藏位置\n * @param len 隐藏长度\n */\nexport function formatIDCard(IDCard: string, start: number = 6, len:number = 8) {\n  return hiddenStr(IDCard, 6, 8,);\n}\n\n/**\n * 隐藏手机号码\n * @param phone\n */\nexport function formatPhone(phone: string) {\n  return hiddenStr(phone, 3, 4,);\n}\n\n/**\n * 隐藏并替换字符串\n * @param str\n * @param start\n * @param len\n * @param replaceStrChar\n */\nexport function hiddenStr(str: string, start: number, len: number, replaceStrChar: string = \"*\") {\n  const replaceStr = new Array(len).fill(replaceStrChar).join(\"\");\n  const reg = new RegExp(`^(.{${start}})(.{${len}})(.{${str.length - start - len}})$`);\n  return str.replace(reg, `$1${replaceStr}$3`);\n}\n\n/**\n * 格式化树\n * @param list 树\n * @param formatFun 格式化没一项的函数\n * @param childrenName 子级 的key\n * @param level 当前层级\n */\nexport function formatTree(list: any[] = [], formatFun: (item: any, index: number) => any, childrenName: string = 'children', level: number = 0): any[] {\n  return list.map((z, i) => {\n    const hasChildren = !!(z[childrenName] || []).length ;\n    return {\n      ...formatFun(z, i),\n      level,\n      hasChildren,\n      children: hasChildren ? formatTree(z[childrenName] || [], formatFun, childrenName, level + 1) : null,\n    };\n  });\n}\n\nexport default {\n  formatIDCard,\n  formatPhone,\n}\n","import reg from './reg';\nimport fun from './fun';\n\nconsole.log(fun.formatPhone(\"18382346121\"), fun.formatIDCard(\"500239199105105956\"));\n\nexport default {\n  regExpUtils: reg,\n  funUtils: fun,\n}\n"]}