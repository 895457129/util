{"version":3,"sources":["src/reg.ts","src/fun.ts","src/index.ts"],"names":[],"mappings":"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","file":"src.f10117fe.js","sourceRoot":"..","sourcesContent":["// 身份证\nexport const IDCard = new RegExp('^[1-9]\\\\d{5}(18|19|20)\\\\d{2}((0[1-9])|(1[0-2]))(([0-2][1-9])|10|20|30|31)\\\\d{3}[0-9Xx]$');\n// 手机号码\nexport const Phone = new RegExp('^1\\\\d{10}$');\n// 邮箱\nexport const Email = new RegExp('^([A-Za-z0-9_\\\\-\\.\\u4e00-\\u9fa5])+\\@([A-Za-z0-9_\\\\-\\.])+\\\\.([A-Za-z]{2,8})$');\n// 汉字\nexport const Chinese = new RegExp('^[\\u4e00-\\u9fa5]+$');\n// IP\nexport const IP = new RegExp('((?:(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d)\\\\.){3}(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d))');\n\ninterface CreatePasswordRegProps {\n  useENLetter?: boolean, // 是否必须包含英文字母\n  useCapitalLetters?: boolean, // 是否必须包含大写英文字母\n  useNumber?: boolean, // 是否必须包含字母\n  useSpecialCharacters?: boolean, // 是否必须包含特殊字符\n  specialCharacters?: string, // 特殊字符内容\n  minLength?: number, // 最小长度\n  maxLength?: number, // 最大长度\n}\n\nconst defaultCreatePasswordRegProps = {\n  useENLetter: true,\n  useCapitalLetters: false,\n  useNumber: true,\n  useSpecialCharacters: false,\n  specialCharacters: \"#?!.,@$%^&*-\",\n  minLength: 6,\n  maxLength: 18,\n};\n\n/**\n * 生校验正则表达式\n * @param props\n */\nexport function createPasswordReg(props: CreatePasswordRegProps = defaultCreatePasswordRegProps) {\n  const newProps = Object.assign(defaultCreatePasswordRegProps, props);\n  const canUseLetter = `[a-zA-Z\\\\d${newProps.specialCharacters}]`;\n  const mustUseENLetter = `(?=.*?[A-Za-z])`;\n  const mustUseCapitalLetters = `(?=.*?[A-Z])`;\n  const mustUseNumber = `(?=.*?[0-9])`;\n  const mustUseSpecialCharacters = `(?=.*?[${newProps.specialCharacters}])`;\n  let str = \"\";\n  if (newProps.useENLetter) {\n    str = `${str}${mustUseENLetter}`;\n  }\n  if (newProps.useCapitalLetters) {\n    str = `${str}${mustUseCapitalLetters}`;\n  }\n  if (newProps.useNumber) {\n    str = `${str}${mustUseNumber}`;\n  }\n  if (newProps.useSpecialCharacters) {\n    str = `${str}${mustUseSpecialCharacters}`;\n  }\n  return new RegExp(`^${str}${canUseLetter}{${newProps.minLength},${newProps.maxLength}}$`);\n}\n\nexport default {\n  IDCard,\n  Phone,\n  Email,\n  Chinese,\n  IP,\n  createPasswordReg,\n};\n","/**\n * 隐藏身份证号码\n * @param IDCard\n * @param start 开始隐藏位置\n * @param len 隐藏长度\n */\nexport function formatIDCard(IDCard: string, start: number = 6, len:number = 8) {\n  return hiddenStr(IDCard, 6, 8,);\n}\n\n/**\n * 隐藏手机号码\n * @param phone\n */\nexport function formatPhone(phone: string) {\n  return hiddenStr(phone, 3, 4,);\n}\n\n/**\n * 隐藏并替换字符串\n * @param str\n * @param start\n * @param len\n * @param replaceStrChar\n */\nexport function hiddenStr(str: string, start: number, len: number, replaceStrChar: string = \"*\") {\n  const replaceStr = new Array(len).fill(replaceStrChar).join(\"\");\n  const reg = new RegExp(`^(.{${start}})(.{${len}})(.{${str.length - start - len}})$`);\n  return str.replace(reg, `$1${replaceStr}$3`);\n}\n\n/**\n * 格式化树\n * @param list 树\n * @param formatFun 格式化没一项的函数\n * @param childrenName 子级 的key\n * @param level 当前层级\n */\nexport function formatTree(list: any[] = [], formatFun: (item: any, index: number) => any, childrenName: string = 'children', level: number = 0): any[] {\n  return list.map((z, i) => {\n    const hasChildren = !!(z[childrenName] || []).length ;\n    return {\n      ...formatFun(z, i),\n      level,\n      hasChildren,\n      children: hasChildren ? formatTree(z[childrenName] || [], formatFun, childrenName, level + 1) : null,\n    };\n  });\n}\n\nexport default {\n  formatIDCard,\n  formatPhone,\n}\n","import reg from './reg';\nimport fun from './fun';\n\nconsole.log(fun.formatPhone(\"18382346121\"), fun.formatIDCard(\"500239199105105956\"));\n\nexport default {\n  regExpUtils: reg,\n  funUtils: fun,\n}\n"]}